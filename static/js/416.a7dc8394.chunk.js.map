{"version":3,"file":"static/js/416.a7dc8394.chunk.js","mappings":"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","sources":["components/Formik/Formik.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ContactFormEdit/ContactFormEdit.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","redux/selectors.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactFormAdd/ContactFormAdd.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikErrorMessage } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 400px;\n  margin-bottom: 50px;\n`;\n\nexport const Label = styled.label`\n  font-weight: bold;\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  color: red;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  list-style: none;\n`;\n\nexport const Info = styled.div`\n  width: 600px;\n`;\n\nexport const Buttons = styled.div`\n  display: flex;\n  gap: 10px;\n`;\n","import styled from 'styled-components';\nimport { MdClose as MdCloseStyled } from 'react-icons/md';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const ModalWindow = styled.div`\n  position: relative;\n  padding: 10px 30px;\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n  background: #fff;\n`;\n\nexport const MdClose = styled(MdCloseStyled)`\n  position: absolute;\n  top: 20px;\n  right: 0px;\n  width: 50px;\n  cursor: pointer;\n`;\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { MdClose, ModalWindow, Overlay } from './Modal.styled';\nimport PropTypes from 'prop-types';\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ children, onClose }) => {\n  useEffect(() => {\n    /* Закриваємо модалку по Esc */\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    /* Реєструємо прослуховувача події*/\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      /* Видаляємо прослуховувача події*/\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  /* Закриваємо модалку по backdrop */\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <ModalWindow>\n        <MdClose onClick={onClose} />\n        {children}\n      </ModalWindow>\n    </Overlay>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Label, ErrorMessage } from 'components/Formik/Formik.styled';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/operations';\nimport { Button } from 'components/Button/Button.styled';\n\n/* Схема валідації */\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string('Must be a string')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string('Must be a string')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .max(50, 'Too Long!')\n    .required('Required'),\n});\n\n/* Компонент ContactForm */\nexport const ContactFormEdit = ({ closeModal, contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  /* Редагування контакту */\n  const handleSubmit = newContact => {\n    dispatch(editContact(newContact));\n    closeModal(); // закриваємо модальне вікно\n  };\n\n  return (\n    <>\n      <h2>Edit contact</h2>\n      <Formik\n        initialValues={{ name, number }}\n        validationSchema={ContactSchema}\n        onSubmit={(values, actions) => {\n          handleSubmit({ id, ...values });\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <Label htmlFor=\"name\">Name</Label>\n          <Field name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\"></ErrorMessage>\n          <Label htmlFor=\"number\">Number</Label>\n          <Field type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"div\"></ErrorMessage>\n          <Button type=\"submit\">Save contact</Button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Item, Info, Buttons } from './ContactItem.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Modal } from 'components/Modal/Modal';\nimport { ContactFormEdit } from 'components/ContactFormEdit/ContactFormEdit';\nimport { useState } from 'react';\nimport { Button } from 'components/Button/Button.styled';\n\nexport const ContactItem = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  /* Відкрити модальне вікно */\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  /* Закрити модальне вікно */\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <Item>\n      <Info>\n        {name} {number}{' '}\n      </Info>\n      <Buttons>\n        <Button onClick={openModal}>Edit</Button>\n        <Button onClick={() => dispatch(deleteContact(id))}>Delete</Button>\n      </Buttons>\n      {isModalOpen && (\n        <Modal onClose={closeModal}>\n          <ContactFormEdit closeModal={closeModal} contact={contact} />\n        </Modal>\n      )}\n    </Item>\n  );\n};\n\n/* Опис типів props */\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin: 70px 0 0 0;\n  padding: 0;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\n/* Фільтрація контактів (з мемоізацією) */\nexport const selectVisibleContacts = createSelector(\n  // Масив вхідних селекторів\n  [selectContacts, selectFilter],\n  // Функція перетворювач\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    const visibleContacts = contacts.filter(item =>\n      item.name.toLowerCase().includes(normalizedFilter)\n    );\n    return visibleContacts;\n  }\n);\n\n/*\n// Фільтрація контактів (без мемоізації)\nexport const selectVisibleContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(item =>\n    item.name.toLowerCase().includes(normalizedFilter)\n  );\n  return visibleContacts;\n};\n*/\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { List } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <List>\n      {visibleContacts.map(item => (\n        <ContactItem key={item.id} contact={item} />\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 400px;\n  margin-bottom: 20px;\n`;\n\nexport const Label = styled.label`\n  font-weight: bold;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filter/slice';\nimport { selectFilter } from 'redux/selectors';\nimport { Container, Label } from './Filter.styled';\n\n/* Компонент Filter */\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  /* Фільтр */\n  const handleChangeFilter = e => {\n    dispatch(changeFilter(e.currentTarget.value));\n  };\n\n  return (\n    <Container>\n      <Label htmlFor=\"filter\">Find contacts by name</Label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChangeFilter}\n      />\n    </Container>\n  );\n};\n","import { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Label, ErrorMessage } from 'components/Formik/Formik.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Button } from 'components/Button/Button.styled';\n\n/* Схема валідації */\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string('Must be a string')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string('Must be a string')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .max(50, 'Too Long!')\n    .required('Required'),\n});\n\n/* Компонент ContactForm */\nexport const ContactFormAdd = ({ closeModal }) => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  /* Додавання контакту */\n  const handleSubmit = newContact => {\n    if (\n      contacts.filter(\n        item =>\n          item.name.toLowerCase().trim() ===\n          newContact.name.toLowerCase().trim()\n      ).length > 0\n    ) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    closeModal(); // закриваємо модальне вікно\n  };\n\n  return (\n    <>\n      <h2>Add new contact</h2>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={ContactSchema}\n        onSubmit={(values, actions) => {\n          handleSubmit({ ...values });\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <Label htmlFor=\"name\">Name</Label>\n          <Field name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\"></ErrorMessage>\n          <Label htmlFor=\"number\">Number</Label>\n          <Field type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"div\"></ErrorMessage>\n          <Button type=\"submit\">Add contact</Button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { Modal } from 'components/Modal/Modal';\nimport { ContactFormAdd } from 'components/ContactFormAdd/ContactFormAdd';\nimport { useState } from 'react';\nimport { Button } from 'components/Button/Button.styled';\n\nconst Contacts = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  /* Відкрити модальне вікно */\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  /* Закрити модальне вікно */\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <h2>Contacts</h2>\n      <Filter />\n      <Button onClick={openModal}>Add Contact</Button>\n      <ContactList />\n      {isModalOpen && (\n        <Modal onClose={closeModal}>\n          <ContactFormAdd closeModal={closeModal} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","ErrorMessage","FormikErrorMessage","_templateObject3","Item","Info","Buttons","Overlay","ModalWindow","MdClose","MdCloseStyled","modalRoot","document","querySelector","Modal","_ref","children","onClose","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","_jsx","onClick","target","currentTarget","_jsxs","ContactSchema","Yup","shape","name","max","required","number","matches","ContactFormEdit","closeModal","contact","id","dispatch","useDispatch","_Fragment","Formik","initialValues","validationSchema","onSubmit","values","actions","newContact","_objectSpread","editContact","resetForm","htmlFor","Field","component","type","Button","ContactItem","_useState","useState","_useState2","_slicedToArray","isModalOpen","setIsModalOpen","deleteContact","List","selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","item","includes","ContactList","visibleContacts","useSelector","fetchContacts","map","Container","Filter","value","onChange","changeFilter","ContactFormAdd","trim","length","alert","concat","addContact"],"sourceRoot":""}